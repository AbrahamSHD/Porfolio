---
import { GitHub, Link, LinkButton } from "../components";
import { ICONS as TAGS } from "../utils/icons";

const PROJECTS = [
  {
    title: "CyberMerch",
    description:
      "Desarrollo del backend pensado para una plataforma de comercio electrónico utilizando NestJS yPrismaORM. Implementación de control de acceso basado en roles para restringir operaciones CRUD deproductos a usuarios administradores. Integración y manejo de Swagger para la documentación de la API.",
    github: "https://github.com/AbrahamSHD/CyberMerch",
      image:
      "https://www.tomray.dev/static/images/nestjs-prisma/nestjs-prisma.png",
    tags: [TAGS.TYPESCRIPT, TAGS.NESTJS, TAGS.NODE, TAGS.POSTGRESQL, TAGS.PRISMA],
  },
  {
    title: "JournalApp - App de notas con React",
    description:
      "Es una aplicación construida con React y Redux que permite a los usuarios crear, editar y eliminar notas personales. Las notas se almacenan en Firebase. La aplicación incluye un sistema de autenticación para registrar y gestionar usuarios nuevos. Además, JournalApp se integra con Cloudinary para permitir la carga de archivos multimedia, como imágenes, que pueden ser adjuntadas a las notas.",
    link: "https://journal-app-ahc.netlify.app/",
    github: "https://github.com/AbrahamSHD/JournalApp",
    image: "/projects/JournalApp.jpeg",
    tags: [TAGS.JAVASCRIPT, TAGS.REACT, TAGS.VITE, TAGS.REDUX],
  },
  {
    title: "API Store",
    description:
      "API Rest desarrollada utilizando Express, MongoDB y Jwt, ofrece funcionalidades esenciales como registro de productos, categorias y un sistema de autenticación de usuarios para garantizar la seguridad de la plataforma. Además, permite el almacenamiento de imágenes, envío de correos electrónicos y encriptaciónd de datos.",
    github: "https://github.com/AbrahamSHD/User-Store",
    image:
      "https://www.split.io/wp-content/uploads/Blog-2160x1080-Building-a-CRUD-API-with-Node-js-and-Express-1920x960.png",
    tags: [TAGS.EXPRESS, TAGS.NODE, TAGS.MONGODB, TAGS.TYPESCRIPT],
  },
  {
    title: "TicketFlow",
    description:
      "Sistema de gestión de colas en tiempo real que distribuye tickets, la aplicación no tiene límite de tickets o límite de escritorios, y todo aparece a travéz de una pantalla el escritorio al que se asigna el ticket, través de websockets. Implementado con Express y TypeScript para una máxima eficiencia.",
    github: "https://github.com/AbrahamSHD/ticket-app",
    image: "/projects/TicketFlow.jpg",
    tags: [TAGS.HTML, TAGS.CSS, TAGS.TYPESCRIPT, TAGS.NODE, TAGS.EXPRESS],
  },
];
---

<div class="flex flex-col gap-y-16">
  {
    PROJECTS.map(({ image, title, description, tags, link, github }) => (
      <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
        <div class="w-full md:w-1/2">
          <div class="relative flex flex-col items-center col-span-6 row-span-5 gap-8 transition duration-500 ease-in-out transform shadow-xl overflow-clip rounded-xl sm:rounded-xl md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:border lg:border-gray-800 lg:hover:border-gray-700 lg:hover:bg-gray-800/50">
            <img
              alt="Imágen del proyecto"
              class="object-cover object-top w-full h-56 transition duration-500 sm:h-full md:scale-110 md:group-hover:scale-105"
              loading="lazy"
              src={image}
            />
          </div>
        </div>

        <div class="w-full md:w-1/2 md:max-w-lg">
          <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
            {title}
          </h3>
          <div class="flex flex-wrap mt-2">
            <ul class="flex flex-row flex-wrap mb-2 gap-2">
              {tags.map((tag) => (
                <li>
                  <span
                    class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2 `}
                  >
                    <tag.icon class="size-4" />
                    {tag.name}
                  </span>
                </li>
              ))}
            </ul>

            <div class="mt-2 text-gray-700 dark:text-gray-400">
              {description}
            </div>
            <footer class="flex items-end justify-start mt-4 gap-x-4">
              {github && (
                <LinkButton href={github}>
                  <GitHub class="size-6" />
                  Code
                </LinkButton>
              )}
              {link && (
                <LinkButton href={link}>
                  <Link class="size-4" />
                  Preview
                </LinkButton>
              )}
            </footer>
          </div>
        </div>
      </article>
    ))
  }
</div>

